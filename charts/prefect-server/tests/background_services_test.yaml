suite: Background Services configuration
release:
  name: background-services-test
  namespace: prefect

tests:
  - it: Should set the correct image and tag
    set:
      backgroundServices:
        runAsSeparateDeployment: true
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].image
          value: prefecthq/prefect:3-latest

  - it: Should set custom image and tag
    set:
      global:
        prefect:
          image:
            repository: custom/prefect
            prefectTag: v2.0.0
      backgroundServices:
        runAsSeparateDeployment: true
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].image
          value: custom/prefect:v2.0.0

  - it: Should set the correct pull policy
    set:
      backgroundServices:
        runAsSeparateDeployment: true
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].imagePullPolicy
          value: IfNotPresent

  - it: Should set custom pull policy
    set:
      global:
        prefect:
          image:
            pullPolicy: Always
      backgroundServices:
        runAsSeparateDeployment: true
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].imagePullPolicy
          value: Always

  - it: Should set image pull secrets
    set:
      global:
        prefect:
          image:
            pullSecrets:
              - my-secret
      backgroundServices:
        runAsSeparateDeployment: true
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.imagePullSecrets[0].name
          value: my-secret

  - it: Should set the correct priority class name
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        priorityClassName: high-priority
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.priorityClassName
          value: high-priority

  - it: Should set the correct debug mode
    set:
      backgroundServices:
        runAsSeparateDeployment: true
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].env[?(@.name == "PREFECT_DEBUG_MODE")].value
          value: "false"

  - it: Should enable debug mode
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        debug: true
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].env[?(@.name == "PREFECT_DEBUG_MODE")].value
          value: "true"

  - it: Should set the correct logging level
    set:
      backgroundServices:
        runAsSeparateDeployment: true
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].env[?(@.name == "PREFECT_LOGGING_SERVER_LEVEL")].value
          value: WARNING

  - it: Should set a custom logging level
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        loggingLevel: DEBUG
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].env[?(@.name == "PREFECT_LOGGING_SERVER_LEVEL")].value
          value: DEBUG

  - it: Should set the correct API URL
    set:
      backgroundServices:
        runAsSeparateDeployment: true
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].env[?(@.name == "PREFECT_API_URL")].value
          value: "http://localhost:4200/api"

  - it: Should set a custom API URL
    set:
      global:
        prefect:
          prefectApiUrl: "https://custom-api.example.com"
      backgroundServices:
        runAsSeparateDeployment: true
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].env[?(@.name == "PREFECT_API_URL")].value
          value: "https://custom-api.example.com"

  - it: Should set the correct API host
    set:
      backgroundServices:
        runAsSeparateDeployment: true
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].env[?(@.name == "PREFECT_SERVER_API_HOST")].value
          value: "0.0.0.0"

  - it: Should set a custom API host
    set:
      global:
        prefect:
          prefectApiHost: "127.0.0.1"
      backgroundServices:
        runAsSeparateDeployment: true
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].env[?(@.name == "PREFECT_SERVER_API_HOST")].value
          value: "127.0.0.1"

  - it: Should set custom environment variables
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        env:
          - name: CUSTOM_ENV
            value: custom_value
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].env[?(@.name == "CUSTOM_ENV")].value
          value: custom_value

  - it: Should set the correct revision history limit
    set:
      backgroundServices:
        runAsSeparateDeployment: true
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.revisionHistoryLimit
          value: 10

  - it: Should set a custom revision history limit
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        revisionHistoryLimit: 5
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.revisionHistoryLimit
          value: 5

  - it: Should set the correct resource requests and limits
    set:
      backgroundServices:
        runAsSeparateDeployment: true
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].resources.requests.cpu
          value: 500m
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].resources.requests.memory
          value: 512Mi
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].resources.limits.cpu
          value: "1"
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].resources.limits.memory
          value: 1Gi

  - it: Should set custom resource requests and limits
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].resources.requests.cpu
          value: 250m
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].resources.requests.memory
          value: 256Mi
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].resources.limits.cpu
          value: 500m
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].resources.limits.memory
          value: 512Mi

  - it: Should set the correct security context
    set:
      backgroundServices:
        runAsSeparateDeployment: true
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.securityContext.runAsUser
          value: 1001
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.securityContext.runAsNonRoot
          value: true
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.securityContext.fsGroup
          value: 1001

  - it: Should set custom security context
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        podSecurityContext:
          runAsUser: 2000
          runAsNonRoot: false
          fsGroup: 3000
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.securityContext.runAsUser
          value: 2000
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.securityContext.runAsNonRoot
          value: false
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.securityContext.fsGroup
          value: 3000

  - it: Should set the correct container security context
    set:
      backgroundServices:
        runAsSeparateDeployment: true
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].securityContext.runAsUser
          value: 1001
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: true
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].securityContext.readOnlyRootFilesystem
          value: true
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
          value: false

  - it: Should set custom container security context
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        containerSecurityContext:
          runAsUser: 2000
          runAsNonRoot: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: true
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].securityContext.runAsUser
          value: 2000
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: false
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].securityContext.readOnlyRootFilesystem
          value: false
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
          value: true

  - it: Should set pod labels
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        podLabels:
          custom-label: custom-value
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.metadata.labels.custom-label
          value: custom-value

  - it: Should set pod annotations
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        podAnnotations:
          custom-annotation: custom-value
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.metadata.annotations.custom-annotation
          value: custom-value

  - it: Should set affinity
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: kubernetes.io/e2e-az-name
                      operator: In
                      values:
                        - e2e-az1
                        - e2e-az2
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions[0].key
          value: kubernetes.io/e2e-az-name

  - it: Should set node selector
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        nodeSelector:
          disktype: ssd
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.nodeSelector.disktype
          value: ssd

  - it: Should set tolerations
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        tolerations:
          - key: "key1"
            operator: "Equal"
            value: "value1"
            effect: "NoSchedule"
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.tolerations[0].key
          value: key1

  - it: Should set extra environment variables from ConfigMap
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        extraEnvVarsCM: my-config-map
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].envFrom[0].configMapRef.name
          value: my-config-map

  - it: Should set extra environment variables from Secret
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        extraEnvVarsSecret: my-secret
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[0].envFrom[0].secretRef.name
          value: my-secret

  - it: Should set extra containers
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        extraContainers:
          - name: sidecar
            image: nginx:latest
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.containers[1].name
          value: sidecar

  - it: Should set extra volumes
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        extraVolumes:
          - name: config
            configMap:
              name: my-config
    asserts:
      - template: background-services-deployment.yaml
        equal:
          path: .spec.template.spec.volumes[1].name
          value: config

  - it: Should set extra volume mounts
    set:
      backgroundServices:
        runAsSeparateDeployment: true
        extraVolumeMounts:
          - name: config
            mountPath: /app/config
    asserts:
      - template: background-services-deployment.yaml
        contains:
          path: .spec.template.spec.containers[0].volumeMounts
          content:
            name: config
            mountPath: /app/config