apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: server
    prefect-version: {{ .Chart.AppVersion }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  revisionHistoryLimit: {{ .Values.server.revisionHistoryLimit }}
  replicas: {{ .Values.sqlite.enabled | ternary 1 .Values.server.replicaCount }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: server
  template:
    metadata:
      {{- if .Values.server.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.server.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: server
        prefect-version: {{ .Chart.AppVersion }}
        {{- if .Values.server.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.server.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.server.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.server.image.pullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      serviceAccountName: {{ template "server.serviceAccountName" . }}
      {{- if .Values.server.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.server.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.server.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.server.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.server.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.server.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.server.podSecurityContext }}
      securityContext: {{- .Values.server.podSecurityContext | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.server.priorityClassName }}
      priorityClassName: {{ .Values.server.priorityClassName }}
      {{- end }}
      containers:
        - name: prefect-server
          image: "{{ .Values.server.image.repository }}:{{ .Values.server.image.prefectTag }}"
          imagePullPolicy: {{ .Values.server.image.pullPolicy }}
          command:
            - /usr/bin/tini
            - -g
            - --
            - /opt/prefect/entrypoint.sh
          args:
            - prefect
            - server
            - start
            {{- if .Values.server.loopServices.runSeparately }}
            - --no-services
            {{- end }}
            - --port
            - {{ .Values.service.targetPort | quote }}
            {{- range .Values.server.extraArgs }}
            - {{ . | toString }}
            {{- end }}
          workingDir: /home/prefect
          ports:
            - containerPort: {{ int .Values.service.targetPort }}
          env:
            - name: HOME
              value: /home/prefect
            - name: PREFECT_API_URL
              value: {{ .Values.server.prefectApiUrl | quote }}
            - name: PREFECT_DEBUG_MODE
              value: {{ .Values.server.debug | quote }}
            - name: PREFECT_LOGGING_SERVER_LEVEL
              value: {{ .Values.server.loggingLevel | quote }}
            - name: PREFECT_SERVER_API_HOST
              value: {{ .Values.server.prefectApiHost | quote }}
            - name: PREFECT_SERVER_API_PORT
              value: {{ .Values.service.targetPort | quote }}
            - name: PREFECT_UI_ENABLED
              value: {{ .Values.server.uiConfig.enabled | quote }}
            {{- if .Values.server.uiConfig.prefectUiApiUrl }}
            - name: PREFECT_UI_API_URL
              value: {{ .Values.server.uiConfig.prefectUiApiUrl | quote }}
            {{- end }}
            {{- if .Values.server.uiConfig.prefectUiUrl }}
            - name: PREFECT_UI_URL
              value: {{ .Values.server.uiConfig.prefectUiUrl | quote }}
            {{- end }}
            - name: PREFECT_UI_STATIC_DIRECTORY
              value: {{ .Values.server.uiConfig.prefectUiStaticDirectory | quote }}
            - name: PREFECT_API_DATABASE_CONNECTION_URL
              {{- if .Values.sqlite.enabled }}
              value: "sqlite+aiosqlite:////data/prefect.db"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "server.postgres-string-secret-name" . }}
                  key: connection-string
              {{- end }}
            {{- if .Values.server.env }}
            {{- include "common.tplvalues.render" (dict "value" .Values.server.env "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.server.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.server.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.server.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.server.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.server.resources }}
          resources: {{- toYaml .Values.server.resources | nindent 12 }}
          {{- end }}
          {{- with .Values.server.containerSecurityContext }}
          securityContext: {{- toYaml . | nindent 12 }}
          {{- end }}
          readinessProbe:
            exec:
              command:
                - python
                - -c
                - "from prefect.server.database import get_db_connection; import asyncio; asyncio.run(get_db_connection())"
            initialDelaySeconds: 5
            periodSeconds: 10
          {{- if .Values.sqlite.enabled }}
          volumeMounts:
            - mountPath: /data
              name: sqlite-storage
          {{- end }}
          volumeMounts:
            - mountPath: /home/prefect
              name: scratch
              subPathExpr: home
            - mountPath: /tmp
              name: scratch
              subPathExpr: tmp
            - mountPath: {{ .Values.server.uiConfig.prefectUiStaticDirectory }}
              name: scratch
              subPathExpr: ui-build
      {{- if .Values.sqlite.enabled }}
      volumes:
        - name: sqlite-storage
          persistentVolumeClaim:
            claimName: {{ template "common.names.fullname" . }}-sqlite
      {{- end }}
      volumes:
        - name: scratch
          emptyDir: {}
