{{ template "chart.header" . }}
{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

## Installing the Chart

To install the chart with the release name `prefect-server`:

```console
helm repo add prefect https://prefecthq.github.io/prefect-helm
helm install prefect-server prefect/prefect-server
```

## Prefect Configuration

### Container Port // Port Forwarding

Without making any modifications to the `values.yaml` file, you can access the Prefect UI by port forwarding either the Server `pod` or `service` with the following command and visiting [http:localhost:4200](http:localhost:4200):
```console
kubectl port-forward svc/prefect-server 4200:4200
```

Note: If you choose to make modifications to either the `server.prefectApiUrl` or `service.port`, make sure to update the other value with the updated port!

### Basic Auth

Prefect documentation on [basic auth](https://docs.prefect.io/v3/develop/settings-and-profiles#security-settings)

Self-hosted Prefect servers can be equipped with a Basic Authentication string for an administrator/password combination.

The format of the auth string is `admin:<my-password>` (no brackets).

```yaml
server:
  basicAuth:
    enabled: true
    authString: "admin:pass"
```

Alternatively, you can provide an existing Kubernetes Secret containing the auth string credentials. The secret must contain a key `auth-string` with the value of the auth string.

```sh
kubectl create secret generic prefect-basic-auth --from-literal=auth-string='admin:my-password'
```

```yaml
server:
  basicAuth:
    enabled: true
    existingSecret: prefect-basic-auth
```

## Background Services Configuration

The Prefect server includes background services related to scheduling and
cleanup. By default, these run in the same deployment as the web server, but
they can be separated for better resource management and scalability.

Support for this separation was added to provide a path to scaling your deployment as your usage grows.
If you are orchestrating a lot of work, you may need more web services to handle requests than background
services to field the increased API requests.

By default, the web services and background services share a connection pool to the
database, but their connection needs are very different and even antagonistic
with each other at times. Splitting the background services out also allows you
to tune the datbase connections for each deployment (pool size, timeout, etc.),
which can help with the database load.

The separate deployment for background services is currently limited to one replica
because it has not been optimized for running multiple copies. Additionally, many background
services run on a loop between 5 and 60 seconds, so if they go down, Kubernetes should bring
them back up after a health check without much disruption.

Splitting the background services is optional, and is likely not necessary if
you are not having any issues with your setup.

To run background services in a separate deployment:

```yaml
backgroundServices:
  runAsSeparateDeployment: true
```

This configuration is recommended when:
- You're experiencing database connection pool contention
- You need different scaling policies for the web server and background services
- You want to monitor and manage resource usage separately

## PostgreSQL Configuration

### Handling Connection Secrets

#### Using the bundled PostgreSQL chart

By default, Bitnami's PostgreSQL Helm Chart will be deployed. This is **not intended for production use**, and is only
included to provide a functional proof of concept installation.

In this scenario, you'll need to provide _either one_ of the following fields:

1. `postgresql.auth.password`: a password you want to set for the prefect user (default: `prefect-rocks`)

2. `postgresql.auth.existingSecret`: name of an existing secret in your cluster with the following field:

    - `connection-string`: fully-quallified connection string in the format of `postgresql+asyncpg://{username}:{password}@{hostname}/{database}`
        - username = `postgresql.auth.username`
        - hostname = `<release-name>-postgresql.<release-namespace>:<postgresql.containerPorts.postgresql>`
        - database = `postgresql.auth.database`

Two secrets are created when not providing an existing secret name:
1. `prefect-server-postgresql-connection`: used by the prefect-server deployment to connect to the postgresql database.

2. `<release-name>-postgresql-0`: defines the `postgresql.auth.username`'s password on the postgresql server to allow successful authentication from the prefect server.

#### Using an external instance of PostgreSQL

If you want to disable the bundled PostgreSQL chart and use an external instance, provide the following configuration:

```yaml
postgresql:
  enabled: false

secret:
  # Option 1: provide the name of an existing secret following the instructions above.
  create: false
  name: <existing secret name>

  # Option 2: provide the connection string details directly
  create: true
  username: myuser
  password: mypass
  host: myhost.com
  port: 1234
  database: mydb
```

### Connecting with SSL configured

1. Mount the relevant certificate to `/home/prefect/.postgresql` so that it can be found by `asyncpg`. This is the default location postgresql expects per their [documentation](https://www.postgresql.org/docs/current/libpq-ssl.html).
    ```yaml
    server:
      extraVolumes:
        - name: db-ssl-secret
          secret:
            secretName: db-ssl-secret
            defaultMode: 384
      extraVolumeMounts:
        - name: db-ssl-secret
          mountPath: "/home/prefect/.postgresql"
          readOnly: true
    postgresql:
      enabled: false
      auth:
        existingSecret: external-db-connection-string
    ```

2. Create a secret to hold the ca certificate for the database with the key `root.crt`
    ```yaml
    apiVersion: v1
    kind: Secret
    metadata:
      name: db-ssl-secret
    data:
      root.crt: BASE64ENCODECERTIFICATE=
    type: Opaque
    ```

3. Set the connection string in the existing secret following this format - `?ssl=verify-ca` is cruicial:
    ```
    postgresql+asyncpg://{username}:{password}@{hostname}/{database}?ssl=verify-ca
    ```

## SQLite Configuration

SQLite can be used as an alternative to PostgreSQL. As mentioned in the
[documentation on hosting Prefect](https://docs-3.prefect.io/v3/manage/self-host),
SQLite is only recommended for lightweight, single-server deployments.

To use SQLite for the database, provide the following configuration values:

```yaml
postgresql:
  enabled: false
sqlite:
  enabled: true
```

More configuration options are available in [`values.yaml`](./values.yaml).

By default, a PersistentVolumeClaim persists the SQLite database file between
Pod restarts.

Note that enabling SQLite enforces 1 replica in the Deployment, and disables
the HorizontalPodAutoscaler.

{{ template "chart.maintainersSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}

{{ template "helm-docs.versionFooter" . }}
